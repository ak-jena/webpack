import { TemplateResult } from 'lit-html';
interface TemplateSelector<TCriteria> {
    matches(criteria: TCriteria): boolean;
}
interface TemplateInstance {
    name: string | null;
    render: (...args: any[]) => (TemplateResult | string);
}
interface Builder<TRenderFunc> {
    renders(renderFunc: TRenderFunc | TemplateResult | string): void;
}
export declare abstract class TemplateRegistryBase<TCriteria> {
    protected _templates: {
        selector: TemplateSelector<TCriteria>;
        templateFunc: () => (TemplateResult | string);
        name: string | null;
    }[];
    name: string;
    constructor(name: string);
    readonly count: number;
    getTemplate(criteria: TCriteria): TemplateInstance | null;
    push(selector: TemplateSelector<TCriteria>, templateFuncOrResult: (() => (TemplateResult | string)) | TemplateResult | string, name?: string | null): void;
}
export default abstract class<TBuilder extends Builder<TRenderFunc>, TCriteria, TRenderFunc extends (...args: any[]) => (TemplateResult | string)> extends TemplateRegistryBase<TCriteria> {
    readonly when: TBuilder;
    protected abstract _createBuilder(): TBuilder;
}
export {};
