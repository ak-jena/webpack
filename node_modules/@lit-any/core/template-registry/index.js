import { html, TemplateResult } from 'lit-html';
export class TemplateRegistryBase {
    constructor(name) {
        this._templates = [];
        this.name = name;
    }
    get count() {
        return this._templates.length;
    }
    getTemplate(criteria) {
        let selectedTemplate;
        if (criteria !== null && typeof criteria !== 'undefined') {
            selectedTemplate = this._templates.find(template => template.selector.matches(criteria));
        }
        if (!selectedTemplate) {
            return null;
        }
        return {
            render: selectedTemplate.templateFunc,
            name: selectedTemplate.name || null,
        };
    }
    push(selector, templateFuncOrResult, name = null) {
        let templateFunc;
        if (typeof templateFuncOrResult === 'string') {
            templateFunc = () => html `templateFuncOrResult`;
        }
        else if (templateFuncOrResult instanceof TemplateResult) {
            templateFunc = () => templateFuncOrResult;
        }
        else {
            templateFunc = templateFuncOrResult;
        }
        this._templates.push({
            selector,
            templateFunc,
            name,
        });
    }
}
// eslint-disable-next-line max-len
export default class extends TemplateRegistryBase {
    get when() {
        return this._createBuilder();
    }
}
//# sourceMappingURL=index.js.map