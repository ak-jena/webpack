import { CSSResult, LitElement } from 'lit-element';
import { FormContract, FieldContract } from './lib/formContract';
interface Model {
    [key: string]: unknown;
}
export default class LitForm extends LitElement {
    contract: FormContract | null;
    noLabels: boolean;
    value: Model;
    submitButtonLabel: string;
    noSubmitButton: boolean;
    noLegend: boolean;
    resetButtonLabel: string;
    noResetButton: boolean;
    clearButtonLabel: string;
    noClearButton: boolean;
    templateRegistry: string;
    formStyles: CSSResult | null;
    fieldsetStyles: CSSResult | null;
    fieldStyles: CSSResult | null;
    static noShadow: boolean;
    private __initialValue;
    form: HTMLFormElement | undefined;
    protected createRenderRoot(): Element | ShadowRoot;
    submit(): void;
    reset(): Promise<void>;
    clear(): Promise<void>;
    render(): import("lit-element").TemplateResult;
    protected firstUpdated(): void;
    protected __formTemplate(c: FormContract): import("lit-element").TemplateResult;
    static readonly styles: CSSResult;
    protected __buttonTemplate(label: string, onClick: () => void): import("lit-element").TemplateResult;
    protected __fieldsetTemplate(c: FormContract): import("lit-element").TemplateResult;
    protected __fieldWrapperTemplate(field: FieldContract): import("lit-element").TemplateResult;
    protected __labelTemplate(field: FieldContract): import("lit-element").TemplateResult;
    protected __fieldTemplate(field: FieldContract, fieldId: string): import("lit-element").TemplateResult | (() => string);
    protected __createModelValueSetter(field: FieldContract): (fieldInput: unknown) => void;
    protected __getPropertyValue(field: FieldContract): unknown;
    protected __fieldsetHeading(currentContract: FormContract): import("lit-element").TemplateResult;
    private __assertStyles;
    private __onSubmit;
}
export {};
