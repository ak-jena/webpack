var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css, CSSResult, LitElement, property, query } from 'lit-element';
import { html } from 'lit-html';
import { ifDefined } from 'lit-html/directives/if-defined';
import { hasAnythingToRender } from './lib/contract-helpers';
import FieldTemplates from './lib';
export default class LitForm extends LitElement {
    constructor() {
        super(...arguments);
        this.contract = null;
        this.noLabels = false;
        this.value = {};
        this.submitButtonLabel = 'Submit';
        this.noSubmitButton = false;
        this.noLegend = false;
        this.resetButtonLabel = 'Reset';
        this.noResetButton = false;
        this.clearButtonLabel = 'Clear';
        this.noClearButton = false;
        this.templateRegistry = '';
        this.formStyles = null;
        this.fieldsetStyles = null;
        this.fieldStyles = null;
        this.__initialValue = {};
    }
    createRenderRoot() {
        if (LitForm.noShadow || this.hasAttribute('no-shadow')) {
            return this;
        }
        return super.createRenderRoot();
    }
    submit() {
        if (this.form) {
            this.dispatchEvent(new CustomEvent('submit', {
                detail: {
                    value: this.value,
                    target: this.form.action,
                    method: this.form.getAttribute('method') || this.form.method.toUpperCase(),
                },
            }));
        }
    }
    async reset() {
        this.value = this.__initialValue;
        await this.requestUpdate();
    }
    async clear() {
        this.value = {};
        await this.requestUpdate();
    }
    render() {
        if (this.contract) {
            return this.__formTemplate(this.contract);
        }
        return html ``;
    }
    firstUpdated() {
        try {
            this.__initialValue = JSON.parse(JSON.stringify(this.value));
        }
        catch (e) {
            console.warn('Failed to serialize form value');
        }
    }
    __formTemplate(c) {
        this.__assertStyles();
        return html `
      <style>
        form {
            ${this.formStyles}
        }

        .fieldset {
            ${this.fieldsetStyles}
        }

        .field {
            ${this.fieldStyles}
        }
      </style>

      <form
        action="${ifDefined(c.target)}"
        method="${ifDefined(c.method)}"
        @submit="${this.__onSubmit}"
      >
        ${hasAnythingToRender(c) ? this.__fieldsetTemplate(c) : ''}
        ${this.noSubmitButton
            ? ''
            : this.__buttonTemplate(this.submitButtonLabel, this.submit.bind(this))}
        ${this.noResetButton
            ? ''
            : this.__buttonTemplate(this.resetButtonLabel, this.reset.bind(this))}
        ${this.noClearButton
            ? ''
            : this.__buttonTemplate(this.clearButtonLabel, this.clear.bind(this))}
      </form>
    `;
    }
    static get styles() {
        return css `
      :host {
        display: block;
      }
    `;
    }
    __buttonTemplate(label, onClick) {
        return FieldTemplates.byName(this.templateRegistry).components.button({
            label,
            onClick,
        });
    }
    __fieldsetTemplate(c) {
        return html `
      <div class="fieldset">
        ${this.__fieldsetHeading(c)} ${(c.fields || []).map(f => this.__fieldWrapperTemplate(f))}
      </div>
    `;
    }
    __fieldWrapperTemplate(field) {
        let labelTemplate = html ``;
        if (!this.noLabels) {
            labelTemplate = this.__labelTemplate(field);
        }
        return html `
      <div class="field">
        ${labelTemplate} ${this.__fieldTemplate(field, field.property)}
      </div>
    `;
    }
    // eslint-disable-next-line class-methods-use-this
    __labelTemplate(field) {
        return html `
      <label for="${field.property}">${field.title || field.property}</label>
    `;
    }
    __fieldTemplate(field, fieldId) {
        const setter = this.__createModelValueSetter(field);
        const fieldTemplate = FieldTemplates.byName(this.templateRegistry).getTemplate({ field });
        const fieldValue = this.__getPropertyValue(field);
        if (fieldTemplate === null) {
            const fallbackComponent = FieldTemplates.byName(this.templateRegistry).components.textbox;
            if (fallbackComponent) {
                const renderFunc = fallbackComponent({
                    type: 'single line',
                });
                return renderFunc(field, fieldId, fieldValue, setter);
            }
            return () => 'Component not found';
        }
        return html `
      ${fieldTemplate.render(field, fieldId, fieldValue, setter)}
    `;
    }
    __createModelValueSetter(field) {
        return (fieldInput) => {
            let newValue = fieldInput;
            if (field.valueDecorator && typeof field.valueDecorator.wrap === 'function') {
                newValue = field.valueDecorator.wrap(newValue);
            }
            if (this.value[field.property] !== newValue) {
                this.value[field.property] = newValue;
                this.requestUpdate();
            }
        };
    }
    __getPropertyValue(field) {
        let value = this.value[field.property] || null;
        if (value && field.valueDecorator && typeof field.valueDecorator.unwrap === 'function') {
            value = field.valueDecorator.unwrap(value);
        }
        return value;
    }
    __fieldsetHeading(currentContract) {
        if (!currentContract.title || this.noLegend) {
            return html ``;
        }
        return html `
      <legend>${currentContract.title}</legend>
    `;
    }
    __assertStyles() {
        if (this.fieldStyles && !(this.fieldStyles instanceof CSSResult)) {
            throw new Error('Value of fieldStyles must be a CSSResult');
        }
        if (this.fieldsetStyles && !(this.fieldsetStyles instanceof CSSResult)) {
            throw new Error('Value of fieldStyles must be a CSSResult');
        }
        if (this.formStyles && !(this.formStyles instanceof CSSResult)) {
            throw new Error('Value of formStyles must be a CSSResult');
        }
    }
    __onSubmit(e) {
        this.submit();
        e.preventDefault();
        return false;
    }
}
LitForm.noShadow = false;
__decorate([
    property({ type: Object, attribute: false })
], LitForm.prototype, "contract", void 0);
__decorate([
    property({ type: Boolean, attribute: 'no-labels', reflect: true })
], LitForm.prototype, "noLabels", void 0);
__decorate([
    property({ type: Object, attribute: false })
], LitForm.prototype, "value", void 0);
__decorate([
    property({ type: String, attribute: 'submit-button-label' })
], LitForm.prototype, "submitButtonLabel", void 0);
__decorate([
    property({ type: Boolean, attribute: 'no-submit-button', reflect: true })
], LitForm.prototype, "noSubmitButton", void 0);
__decorate([
    property({ type: Boolean, attribute: 'no-legend', reflect: true })
], LitForm.prototype, "noLegend", void 0);
__decorate([
    property({ type: String, attribute: 'reset-button-label' })
], LitForm.prototype, "resetButtonLabel", void 0);
__decorate([
    property({ type: Boolean, attribute: 'no-reset-button', reflect: true })
], LitForm.prototype, "noResetButton", void 0);
__decorate([
    property({ type: String, attribute: 'clear-button-label' })
], LitForm.prototype, "clearButtonLabel", void 0);
__decorate([
    property({ type: Boolean, attribute: 'no-clear-button', reflect: true })
], LitForm.prototype, "noClearButton", void 0);
__decorate([
    property({ type: String, attribute: 'template-registry' })
], LitForm.prototype, "templateRegistry", void 0);
__decorate([
    property({ type: String })
], LitForm.prototype, "formStyles", void 0);
__decorate([
    property({ type: String })
], LitForm.prototype, "fieldsetStyles", void 0);
__decorate([
    property({ type: String })
], LitForm.prototype, "fieldStyles", void 0);
__decorate([
    query('form')
], LitForm.prototype, "form", void 0);
window.customElements.define('lit-form', LitForm);
