import { CSSResultArray, PropertyValues, SpectrumElement, TemplateResult } from '@spectrum-web-components/base';
import { Color, Scale } from '@spectrum-web-components/theme';
import { OverlayOpenDetail, Placement, TriggerInteractions } from './overlay-types.js';
export interface PositionResult {
    arrowOffsetLeft: number;
    arrowOffsetTop: number;
    maxHeight: number;
    placement: string;
    positionLeft: number;
    positionTop: number;
}
declare global {
    interface Document {
        fonts?: {
            ready: Promise<void>;
        };
    }
}
declare type OverlayStateType = 'idle' | 'active' | 'visible' | 'hiding' | 'dispose' | 'disposed';
declare type ContentAnimation = 'spOverlayFadeIn' | 'spOverlayFadeOut';
export declare class ActiveOverlay extends SpectrumElement {
    overlayContent: HTMLElement;
    overlayContentTip?: HTMLElement;
    trigger: HTMLElement;
    private popper?;
    _state: OverlayStateType;
    get state(): OverlayStateType;
    set state(state: OverlayStateType);
    animating: boolean;
    placement?: Placement;
    color?: Color;
    receivesFocus?: 'auto';
    scale?: Scale;
    tabbingAway: boolean;
    private originalPlacement?;
    private restoreContent?;
    /**
     * @prop Used by the popper library to indicate where the overlay was
     *       actually rendered. Popper may switch which side an overlay
     *       is rendered on to fit it on the screen
     */
    dataPopperPlacement?: Placement;
    focus(): void;
    private get hasTheme();
    offset: number;
    interaction: TriggerInteractions;
    private positionAnimationFrame;
    private timeout?;
    static get styles(): CSSResultArray;
    constructor();
    private _modalRoot?;
    get hasModalRoot(): boolean;
    feature(): void;
    obscure(nextOverlayInteraction: TriggerInteractions): ActiveOverlay | undefined;
    firstUpdated(changedProperties: PropertyValues): void;
    private updateOverlayPopperPlacement;
    updated(changedProperties: PropertyValues): void;
    private open;
    private extractDetail;
    dispose(): void;
    private stealOverlayContent;
    private willNotifyClosed;
    private returnOverlayContent;
    updateOverlayPosition(): Promise<void>;
    hide(animated?: boolean): Promise<void>;
    private schedulePositionUpdate;
    private onSlotChange;
    handleInlineTriggerKeydown: (event: KeyboardEvent) => void;
    connectedCallback(): void;
    applyContentAnimation(animation: ContentAnimation): Promise<boolean>;
    renderTheme(content: TemplateResult): TemplateResult;
    render(): TemplateResult;
    static create(details: OverlayOpenDetail): ActiveOverlay;
    private stealOverlayContentPromise;
    private stealOverlayContentResolver;
    protected _getUpdateComplete(): Promise<void>;
}
export {};
