import { LitElement, CSSResultArray, TemplateResult, PropertyValues } from '@spectrum-web-components/base';
import { Placement, TriggerInteractions, OverlayOptions } from './overlay-types';
export declare type OverlayContentTypes = 'click' | 'hover' | 'longpress';
/**
 * A overlay trigger component for displaying overlays relative to other content.
 * @element overlay-trigger
 *
 * @slot trigger - The content that will trigger the various overlays
 * @slot hover-content - The content that will be displayed on hover
 * @slot click-content - The content that will be displayed on click
 * @slot longpress-content - The content that will be displayed on click
 *
 * @fires sp-opened - Announces that the overlay has been opened
 * @fires sp-closed - Announces that the overlay has been closed
 */
export declare class OverlayTrigger extends LitElement {
    private closeClickOverlay?;
    private closeLongpressOverlay?;
    private closeHoverOverlay?;
    static get styles(): CSSResultArray;
    /**
     * @type {"auto" | "auto-start" | "auto-end" | "top" | "bottom" | "right" | "left" | "top-start" | "top-end" | "bottom-start" | "bottom-end" | "right-start" | "right-end" | "left-start" | "left-end" | "none"}
     * @attr
     */
    placement: Placement;
    type?: Extract<TriggerInteractions, 'inline' | 'modal' | 'replace'>;
    offset: number;
    open?: OverlayContentTypes;
    disabled: boolean;
    private clickContent?;
    private longpressContent?;
    private hoverContent?;
    private targetContent?;
    private handleClose;
    protected render(): TemplateResult;
    protected updated(changes: PropertyValues): void;
    private manageOpen;
    static openOverlay: (target: HTMLElement, interaction: TriggerInteractions, content: HTMLElement, options: OverlayOptions) => Promise<() => void>;
    private get overlayOptions();
    private onTrigger;
    private prepareToFocusOverlayContent;
    onTriggerClick(): Promise<void>;
    private _longpressEvent?;
    private onTriggerLongpress;
    private hoverOverlayReady;
    private abortOverlay;
    onTriggerMouseEnter(): Promise<void>;
    onTriggerMouseLeave(): Promise<void>;
    private onClickSlotChange;
    private onLongpressSlotChange;
    private onHoverSlotChange;
    private onTargetSlotChange;
    private extractSlotContentFromEvent;
    disconnectedCallback(): void;
}
