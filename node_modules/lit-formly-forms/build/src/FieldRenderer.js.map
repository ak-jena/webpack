{"version":3,"file":"FieldRenderer.js","sourceRoot":"","sources":["../../src/FieldRenderer.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, nothing } from 'lit-html';\r\nimport { classMap } from 'lit-html/directives/class-map';\r\nimport { ifDefined } from 'lit-html/directives/if-defined';\r\nimport { repeat } from 'lit-html/directives/repeat';\r\nimport { until } from 'lit-html/directives/until';\r\nimport { FieldContract, Option } from './FormContract';\r\nimport { Model } from './LitFormlyForm';\r\n//export {html, repeat, until};\r\n\r\n/**\r\n * Renders a field using bootstrap 3 classes\r\n */\r\nexport class FieldRenderer {\r\n\r\n    public renderField(field: FieldContract, value: unknown, set: (value:unknown)=>void, errorMsg: string|null = null, model: Model) {\r\n\r\n        const labelTemplate = this.labelTemplate(field);\r\n        \r\n        const fieldTemplate = this.fieldTemplate(field, value, set, model);\r\n\r\n        const errorClass = { 'has-error': errorMsg!=null };\r\n    \r\n        return html`\r\n          <div class=\"form-group ${classMap(errorClass)}\">\r\n            ${labelTemplate} \r\n            ${fieldTemplate}\r\n            ${this._errorMessageTemplate(errorMsg)}\r\n          </div>\r\n        `;\r\n      }\r\n    \r\n    public labelTemplate(field: FieldContract) {\r\n        const requiredMark = field.templateOptions.required ? '*' : '';\r\n        return html`\r\n            <label class=\"control-label\" for=\"${field.key}\">\r\n            ${field.templateOptions.label} ${requiredMark}\r\n            </label>\r\n        `;\r\n    }\r\n    \r\n    protected _errorMessageTemplate(errorMsg: string|null) {\r\n        if (errorMsg) {\r\n            return html`\r\n            <div>\r\n                <span class=\"text-danger\">\r\n                    ${errorMsg}\r\n                </span>\r\n            </div>`;\r\n        }\r\n        return nothing;\r\n    }\r\n    \r\n    public fieldTemplate(field: FieldContract, value: unknown, set: (value:unknown)=>void, model: Model ) {\r\n        let renderFn = this.renderTextInputField;\r\n        \r\n         if (field.type==='input') {\r\n            renderFn = this.renderTextInputField;\r\n         } else if (field.type==='number') {\r\n            renderFn = this.renderNumberInputField;\r\n         } else if (field.type==='checkbox') {   \r\n             //@ts-ignore     \r\n             renderFn = this.renderCheckboxField;\r\n        } else if (field.type==='select') {\r\n            renderFn = this.renderSelectField;\r\n        } else if (field.type==='datalist') {\r\n            renderFn = this.renderDataListField;\r\n        /*} else if (field.type==='remoteselect') {\r\n            //field.templateOptions.options= [{name: 'Name', value: '1'}, {name: 'Name 2', value: '2'}, {name: 'Name 3', value: '3'},];\r\n            renderFn = this.renderSelectField; */\r\n        } else if (field.type==='date') {\r\n            renderFn = this.renderDateField;\r\n        } else {\r\n            //fall back to input field\r\n            renderFn = this.renderTextInputField;\r\n        }\r\n        //@ts-ignore\r\n        return renderFn.bind(this)(field, value, set, model);\r\n    \r\n    }\r\n    \r\n    protected renderTextInputField(field: FieldContract, value: string, set: (value:unknown)=>void, model: Model) {\r\n        return this.renderInputField(field, value, set, 'text');\r\n        // return html`\r\n        //     <input id=\"${field.key}\" \r\n        //       type=\"text\" \r\n        //       class=\"form-control\"  \r\n        //       name=\"${field.key}\"\r\n        //       .value=\"${value||''}\"\r\n        //       ?required=\"${field.templateOptions.required}\"\r\n        //       placeholder=\"${ifDefined(field.templateOptions.placeholder)}\"\r\n        //       @input=\"${(e: Event & any) => set(e.target.value)}\"\r\n        //       >\r\n        //     </input>\r\n        //     `;\r\n    }\r\n\r\n    protected renderNumberInputField(field: FieldContract, value: string, set: (value:unknown)=>void, model: Model) {\r\n        return this.renderInputField(field, value, set, 'number');\r\n        // const setNumber = (value:unknown) => set(Number(value));\r\n\r\n        // return html`\r\n        //     <input id=\"${field.key}\" \r\n        //       type=\"number\" \r\n        //       class=\"form-control\"  \r\n        //       name=\"${field.key}\"\r\n        //       .value=\"${value||''}\"\r\n        //       ?required=\"${field.templateOptions.required}\"\r\n        //       placeholder=\"${ifDefined(field.templateOptions.placeholder)}\"\r\n        //       @input=\"${(e: Event & any) => setNumber(e.target.value) }\"\r\n        //       ?disabled=\"${field.templateOptions.disabled}\"\r\n        //       ?readonly=\"${field.templateOptions.readonly}\"\r\n        //       >\r\n        //     </input>\r\n        //     `;\r\n    }\r\n\r\n    protected renderInputField(field: FieldContract, value: string, set: (value:unknown)=>void, type: 'text'|'number'|'checkbox' ) {\r\n        let setter = set;\r\n        let step = undefined;\r\n        switch (type) {\r\n            case 'number': {\r\n                setter = (value: unknown) => set(Number(value));\r\n                if (field.templateOptions.type==='decimal') {\r\n                    if (field.templateOptions.step) {\r\n                        step = field.templateOptions.step;\r\n                    } else {\r\n                        step = 'any';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return html`\r\n            <input id=\"${field.key}\" \r\n              type=\"${type}\" \r\n              class=\"form-control\"  \r\n              name=\"${field.key}\"\r\n              .value=\"${value||''}\"\r\n              pattern=\"${ifDefined(field.templateOptions.pattern)}\"\r\n              min=\"${ifDefined(field.templateOptions.min)}\"\r\n              max=\"${ifDefined(field.templateOptions.max)}\"\r\n              step=\"${ifDefined(step === null ? undefined : step)}\"\r\n              minlength=\"${ifDefined(field.templateOptions.minLength)}\"\r\n              maxlength=\"${ifDefined(field.templateOptions.maxLength)}\"\r\n              placeholder=\"${ifDefined(field.templateOptions.placeholder)}\"\r\n              @input=\"${(e: Event & any) => setter(e.target.value) }\"\r\n              ?required=\"${field.templateOptions.required}\"\r\n              ?disabled=\"${field.templateOptions.disabled}\"\r\n              ?readonly=\"${field.templateOptions.readonly}\"\r\n              >\r\n            </input>\r\n\r\n            `;\r\n    }    \r\n    \r\n    protected renderCheckboxField(field: FieldContract, value: boolean, set: (value:unknown)=>void, model: Model ) {\r\n        return html`\r\n            <input\r\n                type=\"checkbox\"\r\n                id=\"${field.key}\"\r\n                @change=\"${(e: any) => set(e.target.checked)}\"\r\n                ?checked=\"${value}\"\r\n                ?disabled=\"${field.templateOptions.disabled}\"\r\n                ?readonly=\"${field.templateOptions.readonly}\"\r\n                >\r\n            </input>`;\r\n    }\r\n\r\n    protected renderDateField(field: FieldContract, value: string, set: (value:unknown)=>void, model: Model ) {\r\n    \r\n        return html`\r\n            <input id=\"${field.key}\" class=\"form-control\"\r\n                type=\"date\"\r\n                .value=\"${value||''}\"\r\n                @change=\"${(e: Event & any) => set(e.target.value)}\"\r\n                ?required=\"${field.templateOptions.required}\">\r\n            </input>\r\n        `;\r\n    }    \r\n    \r\n    protected renderSelectField(field: FieldContract, value: string, set: (value:unknown)=>void, model: Model ) {\r\n        const options = field.templateOptions.options ?? [];\r\n        return html`\r\n            <select id=\"${field.key}\" class=\"form-control\"\r\n                @change=\"${(e: Event & any) => set(e.target.value)}\"\r\n                ?required=\"${field.templateOptions.required}\">\r\n                ${repeat(options, this.renderOption(value))}\r\n            </select>\r\n        `;\r\n    }\r\n\r\n    /**\r\n     * Render a <input> field using a <datalist> element\r\n     * @param {*} field \r\n     * @param {*} value \r\n     * @param {*} set \r\n     * @param {*} model \r\n     * @returns \r\n     */\r\n    protected renderDataListField(field: FieldContract, value: string, set: (value:unknown)=>void, model: Model ) {\r\n        const options = field.templateOptions.options ?? [];\r\n        return html`\r\n            <input class=\"form-control\" id=${field.key} name=${field.key} \r\n                list=\"${field.key}-datalist\" ?required=${field.templateOptions.required}\r\n                @input=${ (e: Event & any) => set(e.target.value)} autocomplete=\"off\">\r\n            </input>            \r\n            <datalist id=\"${field.key}-datalist\">\r\n                ${repeat(options, this.renderOption(value))}\r\n            </datalist>            \r\n        `;\r\n    } \r\n    \r\n    protected renderOption(value: string) {\r\n        return (option: Option) => html`\r\n        <option\r\n            value=\"${option.value}\"\r\n            ?selected=\"${option.value === value}\"\r\n            label=\"${option.name}\">\r\n            ${option.name}\r\n        </option>`;\r\n    }    \r\n\r\n}\r\n\r\n\r\n"]}