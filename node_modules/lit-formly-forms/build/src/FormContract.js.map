{"version":3,"file":"FormContract.js","sourceRoot":"","sources":["../../src/FormContract.ts"],"names":[],"mappings":"","sourcesContent":["\r\nexport type FormContract = FieldContract[];\r\n\r\nexport interface FieldContract {\r\n    /**\r\n     * This allows you to specify the `id` of your field. Note, the `id` is generated if not set.\r\n     */    \r\n    id: string;\r\n\r\n    /**\r\n     * The key that relates to the model. This will link the field value to the model\r\n     */\r\n    key: string;\r\n\r\n    /**\r\n     * If you wish, you can specify a specific `name` for your field. This is useful if you're posting the form to a server using techniques of yester-year.\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * This should be a formly-field type added either by you or a plugin. More information over at Creating Formly Fields.\r\n     */\r\n    type: 'input'|'date'|'number'|'user'|'remoteselect'|'remoteselect-autocomplete'|'select'|'datalist'|'checkbox'; //checkbox, select not used by our API\r\n\r\n    /**\r\n     * This is reserved for the templates. Any template-specific options go in here. Look at your specific template implementation to know the options required for this.\r\n     */    \r\n    templateOptions: TemplateOptions;\r\n\r\n    /**\r\n     * Custom data\r\n     */\r\n    data?: FieldData;\r\n\r\n}\r\n\r\nexport interface FieldData {\r\n    domain: string;\r\n    mappings: FieldDataMapping[];\r\n}\r\n\r\nexport interface FieldDataMapping {\r\n    key: string;\r\n    param: string;\r\n    type: string;\r\n}\r\n\r\nexport interface TemplateOptions {\r\n    label: string;\r\n    type?: 'string'|'decimal'|'integer'|'timestamp'|'double'|'long'|'boolean'; //type from geoserver/DB, geometry | double | long | boolean ???\r\n    required?: boolean;\r\n    pattern?: string;\r\n    placeholder?: string;\r\n    options?: Option[];\r\n\r\n    disabled?: boolean;\r\n    max?: number;\r\n    min?: number;\r\n    minLength?: number;\r\n    maxLength?: number;\r\n    readonly?: boolean;\r\n    step?: number;\r\n\r\n    rows?: number;\r\n    cols?: number;\r\n    description?: string;\r\n    hidden?: boolean;\r\n    tabindex?: number;\r\n    attributes?: { [key: string]: string | number };\r\n    \r\n  \r\n}\r\n\r\nexport interface Option {\r\n    name: string;\r\n    value: string;\r\n}\r\n"]}