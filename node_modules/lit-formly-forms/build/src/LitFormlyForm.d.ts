import { LitElement } from 'lit-element';
import { FieldRenderer } from './FieldRenderer.js';
import { FieldContract, FormContract } from './FormContract.js';
export interface GenericModel {
    get(name: string): unknown;
    set(name: string, value: unknown): void;
}
export interface ObjectModel {
    [key: string]: unknown;
}
export declare type Model = GenericModel | ObjectModel;
export declare class LitFormlyForm extends LitElement {
    contract: FormContract | null;
    private _value;
    get value(): Model;
    set value(val: Model);
    renderer: FieldRenderer;
    /** error object for all fields indexed by their id */
    private errors;
    private _initialValue;
    protected createRenderRoot(): this;
    render(): import("lit-element").TemplateResult;
    protected firstUpdated(): void;
    protected _formTemplate(c: FormContract): import("lit-element").TemplateResult;
    protected _fieldsetTemplate(c: FormContract): import("lit-element").TemplateResult;
    protected _fieldWrapperTemplate(field: FieldContract): import("lit-element").TemplateResult;
    /**
     * Writes value back to model
     * @param field
     */
    protected _createModelValueSetter(field: FieldContract): (fieldInput: unknown) => void;
    protected _getModelValue(name: string): unknown;
    protected _setModelValue(name: string, value: unknown): void;
    protected unwrapFieldValue(field: FieldContract, value: unknown): unknown;
    protected wrapFieldValue(field: FieldContract, value: unknown): unknown;
    protected _getPropertyValue(field: FieldContract): unknown;
    /**
     * Reset to initial value
     */
    reset(): Promise<void>;
    submit(): void;
    formValueUpdated(e: {
        target: (HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement);
    }): Promise<void>;
    validate(el: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): boolean;
    getErrorMessage(validity: ValidityState): "Pattern mismatch!" | "Value missing!" | "Bad input!" | "Range overflow!" | "Range underflow!" | "Step mismatch!" | "Too long!" | "Too short!" | "Type mismatch!" | "Validation error!";
    isValid(): boolean;
    private _onSubmit;
}
