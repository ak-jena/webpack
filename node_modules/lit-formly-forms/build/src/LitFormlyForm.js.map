{"version":3,"file":"LitFormlyForm.js","sourceRoot":"","sources":["../../src/LitFormlyForm.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, css, property } from 'lit-element';\nimport { FieldRenderer } from './FieldRenderer.js';\nimport { FieldContract, FormContract } from './FormContract.js';\n\nexport interface GenericModel {\n  get(name: string): unknown;\n  set(name: string, value: unknown): void;\n}\n\nexport interface ObjectModel {\n  [key: string]: unknown\n}\n\nexport type Model = GenericModel | ObjectModel;\n\nfunction isGenericModel(model: GenericModel | ObjectModel): model is GenericModel {\n  const gm = (model as GenericModel);\n  return isFunction(gm.get) && isFunction(gm.set);\n}\n\nfunction isFunction(fn: Function) {\n  return fn && {}.toString.call(fn) === '[object Function]';\n }\n\nexport class LitFormlyForm extends LitElement {\n  // static styles = css`\n  //     :host {\n  //       input:invalid {\n  //         border-color: red;\n  //       }\n  //     }\n  //     input:invalid {\n  //       border-color: red;\n  //     }\n  //     `; \n\n  @property({ type: Array, attribute: false })\n  public contract: FormContract | null = null;\n\n  @property({ type: Object, attribute: false })\n  private _value: Model = {};\n\n  get value(): Model {\n     return this._value;\n  }\n\n  set value(val: Model) {\n     //reset errors on model change\n     this.errors = {};\n     const oldValue = this._value;\n     this._value = val;\n     this.requestUpdate('value', oldValue);\n  }\n\n  @property({ type: Object, attribute: false })\n  public renderer: FieldRenderer = new FieldRenderer();\n  \n  /** error object for all fields indexed by their id */\n  private errors: {[key:string]:string} = {};\n\n  private _initialValue: Model = {};\n\n  protected createRenderRoot() {\n      return this; //no shadow root\n  }\n\n  public render() {\n    if (this.contract) {\n      return this._formTemplate(this.contract);\n    }\n\n    return html``;\n  }\n\n  protected firstUpdated(): void {\n    try {\n      this._initialValue = JSON.parse(JSON.stringify(this.value));\n    } catch (e) {\n      console.warn('Failed to serialize form value');\n    }\n  }  \n\n  protected _formTemplate(c: FormContract) {\n    //@change=\"${this.formValueUpdated}\"\n    //@formchange=${(e:Event)=>console.log(e)}\n    //@invalid=${(e:Event)=>console.log(e)}\n    //@forminput=${(e:Event)=>console.log(e)}    \n    return html`\n      <form \n          @input=${this.formValueUpdated}\n          @submit=\"${this._onSubmit}\">\n          ${this._fieldsetTemplate(c)}\n      </form>\n    `;\n  }\n\n  protected _fieldsetTemplate(c: FormContract) {\n    console.log('Rendering', c);\n    return html`\n      <div class=\"fieldset\">\n        ${(c || []).map(field => this._fieldWrapperTemplate(field))}\n      </div>\n    `;\n  }\n\n  protected _fieldWrapperTemplate(field: FieldContract) {\n    const propValue = this._getPropertyValue(field);\n    const set = this._createModelValueSetter(field);\n    const errorMsg = this.errors[field.key];\n    return this.renderer.renderField(field, propValue, set, errorMsg, this.value);\n  }\n\n  /**\n   * Writes value back to model\n   * @param field \n   */\n  protected _createModelValueSetter(field: FieldContract) {\n    return (fieldInput: unknown) => {\n      let newValue = fieldInput;\n\n      // if (field.valueDecorator && typeof field.valueDecorator.wrap === 'function') {\n      //   newValue = field.valueDecorator.wrap(newValue)\n      // }\n      newValue = this.wrapFieldValue(field, newValue);\n\n      if (this._getModelValue(field.key) !== newValue) {\n        console.log(`Setting value ${newValue} (old value ${this._getModelValue(field.key)})`);\n        this._setModelValue(field.key, newValue);\n        //this.validate(this.querySelector(`#${field.key}`) as HTMLInputElement);\n\n        this.requestUpdate();\n      }\n    }\n  }\n\n  protected _getModelValue(name: string) {\n    if (isGenericModel(this.value)) {\n      return this.value.get(name);\n    } else {\n      return this.value[name];\n    }\n  }\n\n  protected _setModelValue(name: string, value: unknown) {\n    if (isGenericModel(this.value)) {\n      this.value.set(name, value);\n    } else {\n      this.value[name] = value;\n    }\n  }  \n\n  protected unwrapFieldValue(field: FieldContract, value: unknown) {\n    return value;\n  }\n\n  protected wrapFieldValue(field: FieldContract, value: unknown) {\n    return value;\n  }\n\n  protected _getPropertyValue(field: FieldContract) {\n    let value = this._getModelValue(field.key);\n\n    value = this.unwrapFieldValue(field, value);\n\n    //TODO\n    // if (value && field.valueDecorator && typeof field.valueDecorator.unwrap === 'function') {\n    //   value = field.valueDecorator.unwrap(value)\n    // }\n\n    return value;\n  }  \n\n  /**\n   * Reset to initial value\n   */\n  public async reset() {\n    this.value = this._initialValue;\n    await this.requestUpdate();\n  }  \n\n\n  public submit() {\n    this.dispatchEvent(\n      new CustomEvent('submit', {\n        detail: {\n          value: this.value,\n        }\n      }),\n    )\n  }\n  \n  async formValueUpdated(e: { target: (HTMLInputElement|HTMLSelectElement|HTMLTextAreaElement) }) {\n    const input = e.target;\n    if (input.id) {\n      console.log('Updated input', input.id);\n      const valid = this.validate(input);\n    }\n  }\n\n  validate(el: HTMLInputElement|HTMLSelectElement|HTMLTextAreaElement) {\n    const validity = el.validity;\n    const valid = validity.valid;\n    if (valid) {\n      //clear previous error (if any)\n      if (this.errors[el.id]) {\n        delete this.errors[el.id];\n      }\n    } else {\n      console.log(`Field ${el.id} invalid`, validity);\n      const errorMsg = this.getErrorMessage(validity);\n      this.errors[el.id] = errorMsg;\n      //el.setCustomValidity('Pattern mismatch!');\n    }\n    \n    this.dispatchEvent(new CustomEvent('formvalidation', {detail: {errors: this.errors}, bubbles: true, composed: true}));\n    this.requestUpdate();\n\n    return valid; \n  }\n\n  public getErrorMessage(validity: ValidityState) {\n    if (validity.patternMismatch) {\n      return 'Pattern mismatch!';\n    } else if (validity.valueMissing) {\n      return 'Value missing!';\n    } else if (validity.badInput) {\n      return 'Bad input!';\n    } else if (validity.rangeOverflow) {\n      return 'Range overflow!';\n    } else if (validity.rangeUnderflow) {\n      return 'Range underflow!';\n    } else if (validity.stepMismatch) {\n      return 'Step mismatch!';\n    } else if (validity.tooLong) {\n      return 'Too long!';\n    } else if (validity.tooShort) {                              \n      return 'Too short!';\n    } else if (validity.typeMismatch) {\n      return 'Type mismatch!';\n    } else {\n      return 'Validation error!';\n    }\n  }\n\n  public isValid() {\n    return Object.keys(this.errors).length == 0;\n  }\n\n  private _onSubmit(e: Event) {\n    this.submit()\n    e.preventDefault()\n    return false\n  }  \n}\n"]}